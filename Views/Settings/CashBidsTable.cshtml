@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<DTN.Widgets.Models.CashBidsSettings>

@using DotNetNuke.Web.Mvc.Helpers

@{
    ViewBag.Title = "Cash Bids Table Settings";
}

<h2>Cash Bids Table Settings</h2>
<fieldset>
    <h3>Module Settings</h3>
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.groupBy, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.groupBy,
                new System.Web.Mvc.SelectList(Enum.GetValues(typeof(DTN.Widgets.Models.GroupViewBy))),
                new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.groupBy, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.showGroupByOptions, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.showGroupByOptions)
                    @Html.ValidationMessageFor(model => model.showGroupByOptions, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.view, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.view,
               new System.Web.Mvc.SelectList(Enum.GetValues(typeof(DTN.Widgets.Models.CashBidView))), 
               new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.view, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.showViewOptions, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.showViewOptions)
                    @Html.ValidationMessageFor(model => model.showViewOptions, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.showLocationsSelect, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.showLocationsSelect)
                    @Html.ValidationMessageFor(model => model.showLocationsSelect, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.showCommoditiesSelect, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.CheckBoxFor(model => model.showCommoditiesSelect)
                    @Html.ValidationMessageFor(model => model.showCommoditiesSelect, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        
        <br />        
        <div id="sortableFields" class="form-group">
            <label>Fields To Display (sortable)</label>
            @for (var i = 0; i < Model.visibleFields.Count; i++)
            {
            <div>
                @Html.CheckBoxFor(model => model.visibleFields[i].IsChecked)
                @Html.LabelFor(model => model.visibleFields[i].FieldName, @Model.visibleFields[i].FieldName)
            </div>                
            }
        </div>

        <h3>Portal Settings <sub>(These will overwrite the current portal settings)</sub></h3>
        <div class="form-group">
            @Html.LabelFor(model => model.apiKey, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.apiKey, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.apiKey, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.siteId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.siteId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.siteId, "", new { @class = "text-danger" })
            </div>
        </div>
        @*<div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>*@
    </div>
    </fieldset>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script>
    var el = document.getElementById('sortableFields');
    var sortable = Sortable.create(el);
</script>

    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
